/**
 * @return {Function}
 */
var createHelloWorld = function() {
    return function(...args) {
        return "Hello World"; // Always return "Hello World"
    };
};

/**
 * Example usage:
 */
const f = createHelloWorld();
console.log(f()); // Output: "Hello World"
console.log(f({}, null, 42)); // Output: "Hello World"


/**
 * @param {number} n
 * @return {Function} counter
 */
var createCounter = function(n) {
    let currentCount = n; // Initialize current count with n

    return function() {
        return currentCount++; // Return current count and increment it for the next call
    };
};

/** 
 * Example usage:
 */
const counter = createCounter(10);
console.log(counter()); // Output: 10
console.log(counter()); // Output: 11
console.log(counter()); // Output: 12

const counterNegative = createCounter(-2);
console.log(counterNegative()); // Output: -2
console.log(counterNegative()); // Output: -1
console.log(counterNegative()); // Output: 0
console.log(counterNegative()); // Output: 1
console.log(counterNegative()); // Output: 2


/**
 * @param {any} val
 * @return {Object}
 */
var expect = function(val) {
    return {
        toBe: function(otherVal) {
            if (val === otherVal) {
                return true; // Values are equal
            } else {
                throw new Error("Not Equal"); // Values are not equal
            }
        },
        notToBe: function(otherVal) {
            if (val !== otherVal) {
                return true; // Values are not equal
            } else {
                throw new Error("Equal"); // Values are equal
            }
        }
    };
};

/**
 * Example usage:
 */
try {
    console.log(expect(5).toBe(5)); // Output: true
} catch (e) {
    console.log(e.message); // Not Equal
}

try {
    console.log(expect(5).toBe(null)); // Throws "Not Equal"
} catch (e) {
    console.log(e.message); // Not Equal
}

try {
    console.log(expect(5).notToBe(null)); // Output: true
} catch (e) {
    console.log(e.message); // Equal
}

try {
    console.log(expect(5).notToBe(5)); // Throws "Equal"
} catch (e) {
    console.log(e.message); // Equal
}


/**
 * @param {number[]} arr
 * @param {Function} fn
 * @return {number[]}
 */
var map = function(arr, fn) {
    const result = []; // Initialize an empty array to store the results
    
    for (let i = 0; i < arr.length; i++) { // Iterate through each element in the input array
        result.push(fn(arr[i], i)); // Apply the function fn and push the result to the new array
    }
    
    return result; // Return the new transformed array
};

// Example usage:
const arr1 = [1, 2, 3];
const plusOne = function(n) { return n + 1; };
console.log(map(arr1, plusOne)); // Output: [2, 3, 4]

const arr2 = [1, 2, 3];
const plusI = function(n, i) { return n + i; };
console.log(map(arr2, plusI)); // Output: [1, 3, 5]

const arr3 = [10, 20, 30];
const constant = function() { return 42; };
console.log(map(arr3, constant)); // Output: [42, 42, 42]

/**
 * @param {Function[]} functions - Array of functions to compose
 * @return {Function} - A single composed function
 */
var compose = function(functions) {
    return function(x) {
        return functions.reduceRight((acc, fn) => fn(acc), x);
    };
};

// Test cases
// Example 1
const functions1 = [x => x + 1, x => x * x, x => 2 * x];
const fn1 = compose(functions1);
console.log(fn1(4)); // Expected output: 65

// Example 2
const functions2 = [x => 10 * x, x => 10 * x, x => 10 * x];
const fn2 = compose(functions2);
console.log(fn2(1)); // Expected output: 1000

// Example 3
const functions3 = [];
const fn3 = compose(functions3);
console.log(fn3(42)); // Expected output: 42


function memoize(fn) {
    const cache = new Map();
    let callCount = 0; // Track the number of times the function is called

    const memoizedFunction = function(...args) {
        const key = JSON.stringify(args); // Create a unique key based on arguments

        if (cache.has(key)) {
            return cache.get(key); // Return cached value if it exists
        }

        callCount++; // Increment call count
        const result = fn(...args); // Call the original function
        cache.set(key, result); // Cache the result
        return result;
    };

    memoizedFunction.getCallCount = function() {
        return callCount; // Return the number of calls made
    };

    return memoizedFunction;
}

// Base functions
const sum = (a, b) => a + b;

const factorial = (n) => {
    if (n <= 1) return 1;
    return n * factorial(n - 1);
};

const fib = (n) => {
    if (n <= 1) return n;
    return fib(n - 1) + fib(n - 2);
};

// Function to create the appropria


/**
 * @param {Promise<number>} promise1 - First promise that resolves to a number
 * @param {Promise<number>} promise2 - Second promise that resolves to a number
 * @return {Promise<number>} - A promise that resolves to the sum of the two numbers
 */
function addTwoPromises(promise1, promise2) {
    return Promise.all([promise1, promise2]) // Wait for both promises to resolve
        .then(results => results[0] + results[1]); // Sum the resolved values
}

// Example usage
const promise1 = new Promise(resolve => setTimeout(() => resolve(2), 20));
const promise2 = new Promise(resolve => setTimeout(() => resolve(5), 60));

addTwoPromises(promise1, promise2).then(result => console.log(result)); // Output: 7

const promise3 = new Promise(resolve => setTimeout(() => resolve(10), 50));
const promise4 = new Promise(resolve => setTimeout(() => resolve(-12), 30));

addTwoPromises(promise3, promise4).then(result => console.log(result)); // Output: -2


/**
 * @param {number} millis - The number of milliseconds to sleep
 * @return {Promise} - A promise that resolves after the specified milliseconds
 */
function sleep(millis) {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve(millis); // Resolve the promise with the input millis
        }, millis);
    });
}

// Example usage:
let t = Date.now();
sleep(100).then(() => {
    console.log(Date.now() - t); // Should log approximately 100
});

let t2 = Date.now();
sleep(200).then(() => {
    console.log(Date.now() - t2); // Should log approximately 200
});


/**
 * @param {Function} fn - The function to be executed after the delay
 * @param {Array} args - The arguments to pass to the function
 * @param {number} t - The delay in milliseconds before executing the function
 * @return {Function} - A function that cancels the delayed execution
 */
function cancellable(fn, args, t) {
    let timeoutId; // Variable to store the timeout ID

    // Set up the delayed execution of the function
    timeoutId = setTimeout(() => {
        fn(...args); // Execute the function with the provided arguments
    }, t);

    // Return the cancel function
    return function cancelFn() {
        clearTimeout(timeoutId); // Cancel the execution if it's still pending
    };
}

// Example usage:
const cancelTimeMs = 50;

// Example 1
const cancelFn1 = cancellable((x) => console.log(`Returned: ${x * 5}`), [2], 20);
setTimeout(cancelFn1, cancelTimeMs); // Should log "Returned: 10" after 20ms

// Example 2
const cancelFn2 = cancellable((x) => console.log(`Returned: ${x ** 2}`), [2], 100);
setTimeout(cancelFn2, cancelTimeMs); // Should not log anything since it's canceled before execution

// Example 3
const cancelFn3 = cancellable((x1, x2) => console.log(`Returned: ${x1 * x2}`), [2, 4], 30);
setTimeout(cancelFn3, cancelTimeMs); // Should log "Returned: 8" after 30ms


/**
 * @param {Function} fn - The function to be executed repeatedly
 * @param {Array} args - The arguments to pass to the function
 * @param {number} t - The interval in milliseconds between function calls
 * @return {Function} - A function that cancels the repeated execution
 */
function cancellable(fn, args, t) {
    const results = []; // Store the results of each call
    let intervalId; // Variable to store the interval ID

    // Function to execute fn immediately and start the interval
    const executeFunction = () => {
        const result = fn(...args);
        const time = Date.now(); // Capture the current time
        results.push({ time: time, returned: result }); // Store the result with time
    };

    // Execute immediately
    executeFunction();

    // Set up the interval to execute the function repeatedly
    intervalId = setInterval(() => {
        executeFunction();
    }, t);

    // Return the cancel function
    return function cancelFn() {
        clearInterval(intervalId); // Cancel the interval
        return results; // Return the results array
    };
}

// Function to simulate running the cancellable function
function runExample() {
    const cancelTimeMs = 190; // Set the cancellation time
    const cancelFn = cancellable((x) => x * 2, [4], 35); // Create cancellable function

    // Wait for the cancellation time and then call the cancel function
    setTimeout(() => {
        const results = cancelFn(); // Call the cancel function
        console.log(results); // Log results when cancelled
    }, cancelTimeMs);
}

// Run the example
runExample();


/**
 * @param {Function} fn - The asynchronous function to be time-limited
 * @param {number} t - The time limit in milliseconds
 * @return {Function} - A time-limited version of the input function
 */
function timeLimit(fn, t) {
    return async function(...args) {
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => {
                reject("Time Limit Exceeded");
            }, t);
        });

        // Execute the function and return whichever finishes first
        try {
            const result = await Promise.race([fn(...args), timeoutPromise]);
            return result;
        } catch (err) {
            throw err; // This will be caught in the caller
        }
    };
}

// Example usage function to test it
async function runExample() {
    // Example 1
    const fn1 = async (n) => {
        await new Promise(res => setTimeout(res, 100));
        return n * n;
    };
    const limited1 = timeLimit(fn1, 50);
    const start1 = performance.now();
    try {
        const res1 = await limited1(5);
        console.log({"resolved": res1, "time": Math.floor(performance.now() - start1)});
    } catch (err) {
        console.log({"rejected": err, "time": Math.floor(performance.now() - start1)});
    }

    // Example 2
    const fn2 = async (n) => {
        await new Promise(res => setTimeout(res, 100));
        return n * n;
    };
    const limited2 = timeLimit(fn2, 150);
    const start2 = performance.now();
    try {
        const res2 = await limited2(5);
        console.log({"resolved": res2, "time": Math.floor(performance.now() - start2)});
    } catch (err) {
        console.log({"rejected": err, "time": Math.floor(performance.now() - start2)});
    }

    // Example 3
    const fn3 = async (a, b) => {
        await new Promise(res => setTimeout(res, 120));
        return a + b;
    };
    const limited3 = timeLimit(fn3, 150);
    const start3 = performance.now();
    try {
        const res3 = await limited3(5, 10);
        console.log({"resolved": res3, "time": Math.floor(performance.now() - start3)});
    } catch (err) {
        console.log({"rejected": err, "time": Math.floor(performance.now() - start3)});
    }

    // Example 4
    const fn4 = async () => {
        throw "Error";
    };
    const limited4 = timeLimit(fn4, 1000);
    const start4 = performance.now();
    try {
        const res4 = await limited4();
        console.log({"resolved": res4, "time": Math.floor(performance.now() - start4)});
    } catch (err) {
        console.log({"rejected": err, "time": Math.floor(performance.now() - start4)});
    }
}

// Run the examples
runExample();


/**
 * Returns a debounced version of the provided function.
 * @param {Function} fn - The function to debounce.
 * @param {number} t - The number of milliseconds to delay.
 * @return {Function} - The debounced function.
 */
function debounce(fn, t) {
    let timeoutId; // Variable to hold the timeout ID

    return function(...args) {
        // Clear the existing timeout if the function is called again
        clearTimeout(timeoutId);

        // Set a new timeout
        timeoutId = setTimeout(() => {
            fn(...args); // Call the original function with the arguments
        }, t);
    };
}

// Example usage
function runExample() {
    let start = Date.now();

    function log(...inputs) {
        console.log([Date.now() - start, inputs]);
    }

    const dlog = debounce(log, 50);

    const calls = [
        { t: 50, inputs: [1] },
        { t: 75, inputs: [2] },
        { t: 100, inputs: [3] },
        { t: 150, inputs: [4] }
    ];

    calls.forEach(call => {
        setTimeout(() => dlog(...call.inputs), call.t);
    });
}

// Run the example
runExample();


/**
 * Executes an array of asynchronous functions in parallel.
 * @param {Function[]} functions - An array of functions that return promises.
 * @return {Promise} - A promise that resolves with an array of resolved values or rejects with the reason of the first rejection.
 */
function promiseAll(functions) {
    return new Promise((resolve, reject) => {
        const results = new Array(functions.length); // Array to hold results
        let completed = 0; // Counter for completed promises

        // Loop through each function and execute it
        functions.forEach((fn, index) => {
            fn() // Call the function
                .then(value => {
                    results[index] = value; // Store the resolved value in the correct index
                    completed++; // Increment the completed counter

                    // If all promises have completed, resolve the promise
                    if (completed === functions.length) {
                        resolve(results);
                    }
                })
                .catch(error => {
                    // If any promise rejects, reject the overall promise immediately
                    reject(error);
                });
        });
    });
}

// Example usage function to test it
async function runExample() {
    const functions = [
        () => new Promise(resolve => setTimeout(() => resolve(5), 200)),
        () => new Promise(resolve => setTimeout(() => resolve(10), 100)),
        () => new Promise((_, reject) => setTimeout(() => reject("Error"), 150)),
    ];

    try {
        const result = await promiseAll(functions);
        console.log({ resolved: result });
    } catch (error) {
        console.log({ rejected: error });
    }
}

// Run the example
runExample();

/**
 * Splits an array into chunks of a specified size.
 * 
 * @param {Array} arr - The array to be chunked.
 * @param {number} size - The size of each chunk.
 * @return {Array} A new array containing the chunked subarrays.
 */
var chunk = function(arr, size) {
    // Initialize an empty array to store the chunks
    const result = [];
    
    // Loop through the array, creating chunks of the specified size
    for (let i = 0; i < arr.length; i += size) {
        // Slice the array from the current index up to `size` elements ahead
        const chunk = arr.slice(i, i + size);
        result.push(chunk); // Add the chunk to the result array
    }
    
    return result; // Return the array of chunks
};

// Example usage:
console.log(chunk([1, 2, 3, 4, 5], 1));      // Output: [[1], [2], [3], [4], [5]]
console.log(chunk([1, 9, 6, 3, 2], 3));      // Output: [[1, 9, 6], [3, 2


// Extend the Array prototype with a `last` method
Array.prototype.last = function() {
    // Check if the array is empty
    if (this.length === 0) {
        return -1;
    }
    // Return the last element of the array
    return this[this.length - 1];
};

// Example usage:
const nums1 = [null, {}, 3];
console.log(nums1.last()); // Output: 3

const nums2 = [];
console.log(nums2.last()); // Output: -1


/**
 * Groups elements in the array based on the key generated by the function fn.
 * 
 * @param {Function} fn - A function that returns the key by which to group elements.
 * @return {Object} An object where each key is the result of fn, and each value is an array of items with that key.
 */
Array.prototype.groupBy = function(fn) {
    // Initialize an empty object to hold the grouped elements
    const result = {};
    
    // Loop through each element in the array
    for (const item of this) {
        // Determine the key by calling fn on the item
        const key = fn(item);
        
        // Check if the key already exists in result
        if (!result[key]) {
            // If not, initialize it as an empty array
            result[key] = [];
        }
        
        // Add the item to the array corresponding to the key
        result[key].push(item);
    }
    
    return result; // Return the grouped object
};

// Example usage:

// Example 1
const array1 = [
  {"id":"1"},
  {"id":"1"},
  {"id":"2"}
];
const fn1 = function (item) { return item.id; };
console.log(array1.groupBy(fn1));
// Output: { "1": [{"id": "1"}, {"id": "1"}], "2": [{"id": "2"}] }

// Example 2
const array2 = [
  [1, 2, 3],
  [1, 3, 5],
  [1, 5, 9]
];
const fn2 = function (list) { return String(list[0]); };
console.log(array2.groupBy(fn2));
// Output: { "1": [[1, 2, 3], [1, 3, 5], [1, 5, 9]] }

// Example 3
const array3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
const fn3 = function (n) { return String(n > 5); };
console.log(array3.groupBy(fn3));
// Output: { "true": [6, 7, 8, 9, 10], "false": [1, 2, 3, 4, 5] } 


/**
 * Sorts an array based on the values returned by the function fn.
 * 
 * @param {Array} arr - The array to be sorted.
 * @param {Function} fn - A function that returns a number, used as the sort key.
 * @return {Array} The sorted array.
 */
var sortBy = function(arr, fn) {
    return arr.sort(function(a, b) {
        return fn(a) - fn(b);
    });
};

// Example usage in isolated scopes

// Example 1
(function() {
    var arr = [5, 4, 1, 2, 3];
    var sortFn = function(x) { return x; };
    console.log(sortBy(arr, sortFn)); // Output: [1, 2, 3, 4, 5]
})();

// Example 2
(function() {
    var arr = [{"x": 1}, {"x": 0}, {"x": -1}];
    var sortFn = function(d) { return d.x; };
    console.log(sortBy(arr, sortFn)); // Output: [{"x": -1}, {"x": 0}, {"x": 1}]
})();

// Example 3
(function() {
    var arr = [[3, 4], [5, 2], [10, 1]];
    var sortFn = function(x) { return x[1]; };
    console.log(sortBy(arr, sortFn)); // Output: [[10, 1], [5, 2], [3, 4]] 
})();


/**
 * Joins two arrays of objects by id, merging objects with the same id.
 * 
 * @param {Array} arr1 - First array of objects with unique ids.
 * @param {Array} arr2 - Second array of objects with unique ids.
 * @return {Array} - Array of merged objects sorted by id.
 */
var join = function(arr1, arr2) {
    const map = new Map();

    // Add objects from arr1 to the map
    for (const obj of arr1) {
        map.set(obj.id, { ...obj }); // Spread operator to copy the object
    }

    // Add or merge objects from arr2 into the map
    for (const obj of arr2) {
        if (map.has(obj.id)) {
            // Merge existing object with the one from arr2, using arr2 values
            map.set(obj.id, { ...map.get(obj.id), ...obj });
        } else {
            // Add new object from arr2 if id is not present
            map.set(obj.id, { ...obj });
        }
    }

    // Convert map to sorted array based on id
    return Array.from(map.values()).sort((a, b) => a.id - b.id);
};

// Example usage:
const arr1 = [
    {"id": 1, "x": 1},
    {"id": 2, "x": 9}
];
const arr2 = [
    {"id": 3, "x": 5}
];
console.log(join(arr1, arr2)); 
// Output: [{"id": 1, "x": 1}, {"id": 2, "x": 9}, {"id": 3, "x": 5}]

const arr1Example2 = [
    {"id": 1, "x": 2, "y": 3},
    {"id": 2, "x": 3, "y": 6}
];
const arr2Example2 = [
    {"id": 2, "x": 10, "y": 20},
    {"id": 3, "x": 0, "y": 0}
];
console.log(join(arr1Example2, arr2Example2)); 
// Output: [{"id": 1, "x": 2, "y": 3}, {"id": 2, "x": 10, "y": 20}, {"id": 3, "x": 0, "y": 0}]


/**
 * Flattens a multi-dimensional array up to a specified depth.
 *
 * @param {Array} arr - The array to flatten.
 * @param {number} depth - The depth to flatten to.
 * @return {Array} - The flattened array.
 */
var flat = function(arr, n) {
    // Base case: if the depth is 0 or less, return the array as is
    if (n <= 0) return arr;

    // Initialize an empty array to hold the flattened results
    let result = [];

    // Iterate through each element in the array
    for (const item of arr) {
        // If the item is an array and we can flatten further, recurse
        if (Array.isArray(item)) {
            // Use the flat function recursively, decrementing the depth
            result.push(...flat(item, n - 1));
        } else {
            // If it's not an array, push it directly to the result
            result.push(item);
        }
    }

    return result;
};

// Example usage:
console.log(flat([1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]], 0)); 
// Output: [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]]

console.log(flat([1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]], 1)); 
// Output: [1, 2, 3, 4, 5, 6, 7, 8, [9, 10, 11], 12, 13, 14, 15]

console.log(flat([[1, 2, 3], [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]], 2)); 
// Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]


/**
 * Compacts an object or array by removing keys with falsy values.
 *
 * @param {Object|Array} obj - The object or array to compact.
 * @return {Object|Array} - The compacted object or array.
 */
var compactObject = function(obj) {
    // Check if the input is an array
    if (Array.isArray(obj)) {
        // Filter the array to remove falsy values and recursively compact nested arrays
        return obj
            .map(compactObject) // Recursively compact each element
            .filter(value => value); // Remove falsy values
    }
    
    // Check if the input is an object (not an array)
    if (typeof obj === 'object' && obj !== null) {
        // Create a new object to hold compacted key-value pairs
        return Object.keys(obj).reduce((acc, key) => {
            const value = compactObject(obj[key]); // Recursively compact the value
            if (value) { // Only add key-value pairs where value is truthy
                acc[key] = value;
            }
            return acc;
        }, {});
    }
    
    // For non-object, non-array types (like numbers or strings), return as is
    return obj;
};

// Example usage:
console.log(compactObject([null, 0, false, 1])); 
// Output: [1]

console.log(compactObject({"a": null, "b": [false, 1]})); 
// Output: {"b": [1]}

console.log(compactObject([null, 0, 5, [0], [false, 16]])); 
// Output: [5, [], [16]]


class EventEmitter {
    constructor() {
        this.events = {}; // Object to hold event listeners
    }

    // Method to subscribe to an event
    subscribe(eventName, callback) {
        if (!this.events[eventName]) {
            this.events[eventName] = []; // Initialize the array if it doesn't exist
        }

        // Push the callback to the listeners for this event
        this.events[eventName].push(callback);

        // Return an object with an unsubscribe method
        return {
            unsubscribe: () => {
                const index = this.events[eventName].indexOf(callback);
                if (index !== -1) {
                    this.events[eventName].splice(index, 1); // Remove the callback from the listeners
                }
                return undefined; // Return undefined as per the requirement
            }
        };
    }

    // Method to emit an event
    emit(eventName, args = []) {
        if (!this.events[eventName]) {
            return []; // Return an empty array if no listeners are subscribed
        }

        // Call each callback and collect the results
        const results = this.events[eventName].map(callback => callback(...args));
        return results; // Return the results of the callbacks
    }
}

// Example usage
const emitter = new EventEmitter();
const sub1 = emitter.subscribe("firstEvent", (...args) => args.join(','));
console.log(emitter.emit("firstEvent", [1, 2, 3])); // Output: ["1,2,3"]
const sub2 = emitter.subscribe("firstEvent", x => x + 1);
console.log(emitter.emit("firstEvent", [5])); // Output: ["5,1"]
sub1.unsubscribe(); // Unsubscribe the first callback
console.log(emitter.emit("firstEvent", [5])); // Output: [6]


class ArrayWrapper {
    constructor(arr) {
        this.arr = arr; // Store the array passed to the constructor
    }

    // Overriding the valueOf method to handle addition with the + operator
    valueOf() {
        return this.arr.reduce((sum, num) => sum + num, 0); // Return the sum of the array elements
    }

    // Overriding the toString method to return the desired string format
    toString() {
        return `[${this.arr.join(',')}]`; // Return the array as a string in the required format
    }
}

// Example usage
const obj1 = new ArrayWrapper([1, 2]);
const obj2 = new ArrayWrapper([3, 4]);

// Adding two ArrayWrapper instances
console.log(obj1 + obj2); // Output: 10

const obj3 = new ArrayWrapper([23, 98, 42, 70]);
console.log(String(obj3)); // Output: "[23,98,42,70]"

const obj4 = new ArrayWrapper([]);
const obj5 = new ArrayWrapper([]);
console.log(obj4 + obj5); // Output: 0


class Calculator {
    constructor(initialValue) {
        this.result = initialValue; // Initialize the calculator with a starting value
    }

    add(value) {
        this.result += value; // Add the value to the result
        return this; // Return the updated Calculator instance for chaining
    }

    subtract(value) {
        this.result -= value; // Subtract the value from the result
        return this; // Return the updated Calculator instance for chaining
    }

    multiply(value) {
        this.result *= value; // Multiply the result by the value
        return this; // Return the updated Calculator instance for chaining
    }

    divide(value) {
        if (value === 0) {
            throw new Error("Division by zero is not allowed"); // Error handling for division by zero
        }
        this.result /= value; // Divide the result by the value
        return this; // Return the updated Calculator instance for chaining
    }

    power(value) {
        this.result **= value; // Raise the result to the power of the value
        return this; // Return the updated Calculator instance for chaining
    }

    getResult() {
        return this.result; // Return the current result
    }
}

// Example usage:
const calc = new Calculator(10);
const result = calc.add(5).subtract(2).multiply(3).divide(2).power(2).getResult();
console.log(result); // Output: 169 (because ((10 + 5 - 2) * 3 / 2) ^ 2 = 169)


function createHelloWorld() {
    return function(...args) {
        return "Hello World"; // This inner function will always return "Hello World"
    };
}

// Example usage:
const f = createHelloWorld();
console.log(f()); // Output: "Hello World"
console.log(f({}, null, 42)); // Output: "Hello World"


function createCounter(n) {
    return function() {
        return n++; // Return the current value of n and then increment it
    };
}

// Example usage:
const counter = createCounter(10);
console.log(counter()); // Output: 10
console.log(counter()); // Output: 11
console.log(counter()); // Output: 12


var createCounter = function(init) {
    let currentValue = init;

    return {
        increment: function() {
            currentValue += 1;
            return currentValue;
        },
        decrement: function() {
            currentValue -= 1;
            return currentValue;
        },
        reset: function() {
            currentValue = init;
            return currentValue;
        }
    };
};

// Create two different counter instances with unique variable names
const counter1 = createCounter(5);
console.log(counter1.increment()); // 6
console.log(counter1.reset()); // 5
console.log(counter1.decrement()); // 4

const counter2 = createCounter(0);
console.log(counter2.increment()); // 1
console.log(counter2.increment()); // 2
console.log(counter2.decrement()); // 1
console.log(counter2.reset()); // 0
console.log(counter2.reset()); // 0



